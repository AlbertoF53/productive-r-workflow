{
  "hash": "53d7d08b25c17bc75d267a0d7f852f10",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Productive R Workflow Module 2\"\nauthor: \"Alberto F. Cabrera\"\nformat:\n  html:\n    code-link: true\n    code-fold: true\n    self-contained: true\n    embed-resources: true\n    toc: true\n    theme: Zephyr\n    number-sections: false\nexecute: \n  warning: false\n  message: false\n  echo: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Productive R Workflow Workshop\n\n## Module 2\n\n### Lesson 1\n\nA data science notebook is an innovative environment where **code, results, and explanations coexist** seamlessly.\n\nIf you're using basic R scripts, let's explore how this can be a **game-changer** for you.\n\n#### Definition of notebook\n\nA notebook is a document in which you can display and run **both** your code and your explanation.\n\nYou write some text, then write some code like `2 + 2` or `plot(1,1)`, and it creates a beautiful document with everything.\n\n#### Why notebooks\n\nNotebooks are going to make your life easier for 4 main reasons:\n\n-   **Productivity**: no more copy-paste. No more uncommented scripts that are impossible to understand.\n\n-   **Reproducibility**: your notebook is the source of truth, and you can re-run the whole analysis in 1 click.\n\n-   **Collaboration**: people can easily follow and understand your work by reading the report.\n\n-   **Interactivity**: the notebook can be exported as an html report, so you can include interactive charts, tables and more.\n\n#### Lesson 2\n\nIt showcase the creation of the analysis Quarto document. Notice this file displays several options to retrieve the data, mostly referencing the location of the file. Two options work for rendering the quarto document. Another when running the program itself.\n\n### Lesson 3\n\nShowcases how to edit ab htlml document using Markdown.\n\n#### Emphasis & code\n\nTo make text **bold**, wrap it with two asterisks `**` or underscores `__`.\n\nTo make text *italic*, use one asterisk `*` or underscore `_`.\n\nTo add something related to code, wrap it in back-ticks `` ` ``.\n\nCase in point. We can bold penguins with \\* asterisk as *penguins*. Or we could italize penguins with \"-\" *penguins*. Or we could wrap the word with ticks `penguins`.\n\nTo strike words use \\~\\~ \\~\\~ for example strike this ~~this~~\n\nFor line breaks\n\nLinks and images\n\nTo create hyperlink [Google](www.google.com)\n\n#### Lesson 4\n\nCorrect procedure to embedding R Code with a Quarto report.\n\n##### Hide warnings and errors\n\nUse warning = FALSE and message = FALSE\n\nTwo ways to do it. Inserting these two options within YAML execute section. Or inserting them in the code chunk as follows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n##### Collapse code in document\n\nYou cab enhance document readability by collapsing all code chunks. This is done through the **YAML** header., which allows focusing on *content* rather than the code.\n\n```         \n---\ntitle: \"Your Document Title\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n```\n\n#### Lesson 5\n\n##### Controlling figure size\n\nControlling the width and height of a figure using the `figure.width` and `fig.hight` options. These dimensions are specified in inches.\n\nOn the web, we usualy have **96 [P]{.underline}ixels [P]{.underline}er [I]{.underline}nch** (PPI). And by default, a Quarto document is rendered with a **width** of 900 pixels.\n\nSetting the chart's width to ***9*** inches thus ensures it spans the **full width** of the page. See examples in the analysis.qmd quarto document.\n\n##### Responsiveness\n\nResponsiveness in web design means that your content, including figures, **adjusts to the screen size** of the device it's being viewed on. This is **crucial** for maintaining a user-friendly experience.\n\nTrust me, you **will** have people reading your report on their phone.\n\n##### Figure alignment\n\nDifferent preferences for figure alignment, such as **left**, **center**, or **right**, can be easily managed in Quarto by using the chunk parameters `fig.align='left'`, `fig.align='center'`, or `fig.align='right'`, respectively.\n\n##### Multiple figures\n\nDisplaying **multiple charts side by side** is a frequent requirement for a clean Quarto report. By default, charts generated within a single code chunk are displayed **one after the other vertically**, consuming considerable space on the page.\n\nTo address this, we'll explore **two effective strategies** for optimizing layout and conserving space.\n\n###### Using Patchwork\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n\np1 <- ggplot(mtcars) + geom_point(aes(mpg,disp))\n\np2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](module_2_files/figure-html/cars_patchwork-1.png){width=672}\n:::\n:::\n\n\n\nExamples of [patchwork](https://r-graph-gallery.com/package/patchwork.html) gallery.\n\n###### Quarto options\n\nQuarto includes comprehensive features for customizing the **layout** of figures. One of the most straightforward options is the `layout-ncol` feature. This allows you to specify the **number of columns** across which your graphs should be displayed.\n\nAn added advantage of this approach is its **responsiveness**. When viewed on narrower screens, the graphs will **automatically stack vertically**, ensuring clarity and readability.\n\n###### Caption\n\nIt's likely that many will **only skim** your report, focusing primarily on the **titles**, **graphs**, and their **captions**.\n\nTherefore, these elements must independently **convey a compelling narrative**. This highlights the critical role of captions; they should succinctly clarify what isn't immediately apparent from the graph alone.\n\nAdding captions is straightforward with the `fig.cap` chunk parameter. A useful technique I favor is placing the caption **in the margin**, achievable through a specific YAML header parameter:\n\nInclude images\n\nt is of course possible to include images in your report using the following syntax:\n\n```         \n![](image1.png){fig-alt=\"An image showing xxx\" fig-align=\"left\" width=300}\n```\n",
    "supporting": [
      "module_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}